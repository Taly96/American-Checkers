<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iY6IlUuLlnUDA4GXOEx0S0lMS3mTFAwuCwwwDg4xMjJSI2JianZ3d3x8goWGhoaGjIyJiYmJjyE3TGRZ
        SXR1gGeQW1GROotMJCRLkmY4c0xJTEtLkxUMHgsMDA0ODjEyQVIjI2JweHd3fHyChYWGhoaGjIaJhlON
        N0xbWVhzc1kGakpYSWYDS0lMS45ROHNJSzRLSyIViC4KCwswDQ4OMTIyUlJiYmp4dnd8fIKChYWGhoWG
        hoZ+Q0g4WFlcTHRYSlyJZIqBi1hYWEtzTHNMSUlLS3khFgUeCgsLDDAODg4xMlJSIyNianB2d3d3fHyC
        goWFhYaCfh+HN0tZWUl0NFpZZGRbZFZYf1hlf3V0S0lJS0tYVRYdgQgKCwswDQ4OMTIyMlIjYmJqanB4
        d3d3fHyCfIJ8fH4fCDVMXFlZTHRMWVlkZFtkf1h/WEt0TElJSUtsgxWEewseCAoLDAwwDg4xMjIyI1Ij
        YmJqdnB3d3d3d3d8fH1+RENIOEtZWVxzOEx/gFlkZGRbVkw4c0lYZUtLeTooTR0IPx4ICgsLMDAODg4y
        MjJSUlJiYmJqamp2dnd3dnd4U3EfLjZMSlpZXEx0dDRYXFhlS3N0TElYWElLeSQVIHo9JggIHi4LCwsw
        MA4ODzExMjJSUiMjYmJiYmpqanBwalMzcSByNUxYWllcS0xzdHR0dDhzS2VYWEpLdWwnFSkpAGktIR4e
        CgsLDAwNDg4OMTIyMlJSI1IjI2JiamJqampTM0QzVTQ3R0laWWRYZUtMS0tJa1xcXFhsS20IFhFubwBh
        KwgeHh4uCgsMDEANDg4PMTIyMjJSUiMjIyMjI2IjUzNERBFjRzZFR1laWllbZFxcXGRcXGVLS11mFk5n
        aAABAFBROgceCAgKCwsMDQ0ODg4PMTIyMlJBIyMjIzIjQlMzMzNUEVVWNkVXR1hZWllZW1lcWEtMXV0J
        Xl9NYAEBAAAAPT4/Bx4ILgoLCwxADQ0ODg4OMTIyMjIyQTIyI0JDHx8fH0QRICU3NkVFRkdISUpLTEw4
        NzlNFk5PAQEAAAAAAAErLC0eHh4uLgoKLwswDQ4ODg4OMTEyMjEyMjIyEB8fHx8fMxESJyU0NTY2Njc3
        Nzc4OTo7FTwpGgAAAAAAAAAAABscHRkIHggKCgsLCwwMDQ0ODg4ODg4ODw8PDhARHx8fESARIBEUECEi
        IyQkJCUmJxMoFykdKgAAAAAAAAAAAAEAAQIDBAUGBwgJCgsLDAwMDQ0NDg4ODg8ODg4QERERERERERER
        ERITExQTExUVFhMXGBkaAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>